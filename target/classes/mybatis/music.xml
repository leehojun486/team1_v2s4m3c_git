<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- dev.mvc.music.MusicDAOInter 패키지에 등록된 interface 명시,
      패키지명과 인터페이스명은 실제로 존재해야함,
      Spring이 내부적으로 자동으로 interface를 구현해줌. -->
<mapper namespace="dev.mvc.music.MusicDAOInter">

  <!-- <insert id="create" parameterType="MusicVO">
    <selectKey keyProperty="musicno" resultType="int" order="BEFORE">
      SELECT music_seq.nextval FROM dual
    </selectKey>
    INSERT INTO music(musicno, title, singer, album, genreno, genre, rdate, lyrics, likelist, likesu, file1, thumb1, size1, 
                      musiclong, singerno, albumno, passwd)
    VALUES (music_seq.nextval, #{title }, #{singer }, #{album }, #{genreno }, #{genre }, sysdate, #{lyrics} ,#{likelist} ,#{likesu }, #{file1}, #{thumb1}, #{size1}, 
                      #{musiclong }, #{singerno }, #{albumno }, #{passwd })
  </insert> -->
  
  <!-- <insert parameterType="MusicVO" id="create"> 
    <selectKey keyProperty="musicno" resultType="int" order="BEFORE">
      SELECT music_seq.nextval FROM dual 
    </selectKey>
    INSERT INTO music(musicno, title, singer, album, genreno, genre, rdate, lyrics, likelist, likesu, mp3, file1, thumb1, musiclong, passwd, youtube, replycnt, cnt, word, singerno, albumno)
    VALUES (music_seq.nextval, #{title }, #{singer }, #{album }, #{genreno }, #{genre }, sysdate, #{lyrics} ,#{likelist} ,#{likesu }, #{mp3}, #{file1}, #{thumb1}, #{musiclong }, #{passwd }, #{youtube }, #{replycnt }, #{cnt }, #{word }, #{singerno }, #{albumno }) 
  </insert> -->
  
  <insert parameterType="MusicVO" id="create">
    INSERT INTO music(musicno, title, singer, album, genre, likesu, playsu, youtube)
    VALUES (music_seq.nextval, #{title}, #{singer}, #{album}, #{genre}, #{likesu}, #{playsu}, #{youtube})
  </insert>
  
  <select id="list" resultType="MusicVO">
    SELECT musicno, title, singer, album, genre, likesu, playsu, youtube
    FROM music
    ORDER BY musicno ASC
  </select>
  
  <select id="list_seqno_asc" resultType="MusicVO">
    SELECT musicno, title, singer, album, genre, likesu, playsu, youtube
    FROM music
    ORDER BY musicno ASC
  </select>
  
  <select id="list_by_singerno" resultType="MusicVO"> 
    SELECT musicno, title, singer, album, genre, likesu, playsu, youtube
    FROM music 
    ORDER BY musicno ASC  
  </select>
  
  <select id="read" resultType="MusicVO" parameterType="int">
    SELECT *
    FROM music 
    WHERE musicno = #{musicno}
  </select>
  
  <!-- <update id="add_likelist" parameterType="MusicVO">
    UPDATE music
    SET likelist=#{likelist}
    WHERE musicno=#{musicno}
  </update> -->
  
  <!-- <update id="delete_likelist" parameterType="MusicVO">
    UPDATE music
    SET likelist=#{likelist}
    WHERE musicno=#{musicno}
  </update> -->
  
  <select id="list_search" resultType="MusicVO" parameterType="MusicVO">
    SELECT *
    FROM music
    WHERE (singer LIKE '%' || #{word} || '%'
        or title LIKE '%' || #{word} || '%' 
        or album LIKE '%' || #{word} || '%' )
    ORDER BY musicno DESC
  </select>
  
  <!-- Join Genre 별 music 목록 -->
  <select id="list_join_by_genreno" resultType="MusicVO" parameterType="int">
    SELECT genre, musicno, title, singer, album
    FROM music
    ORDER BY musicno ASC
  </select>
  
  <select id="total_count" resultType="int">
    SELECT COUNT(*) as cnt
    FROM music
  </select>
  
  <select id="list_by_genreno_search_paging" resultType="MusicVO"  parameterType="HashMap"> 
    SELECT musicno, title, singer, album, genre, likesu, playsu, youtube, r
    FROM (
             SELECT musicno, title, singer, album, genre, likesu, playsu, youtube, rownum as r
             FROM (
                      SELECT musicno, title, singer, album, genre, likesu, playsu, youtube
                      FROM music
                      <choose>
                        <when test="word == null or word == ''">  <!-- 검색하지 않는 경우 -->
                        </when>
                        <otherwise>
                        (title LIKE '%' || #{word} || '%'  <!-- 곡제목, 가수이름, 앨범제목, 가사 중 검색 -->
                         OR singer LIKE '%' || #{word} || '%'
                         OR album LIKE '%' || #{word} || '%' )
                        </otherwise>
                      </choose>
                      ORDER BY musicno DESC
             )
    )
    WHERE <![CDATA[ r >= #{startNum} AND r <= #{endNum} ]]>
  </select>
  
 
  <!-- 장르별 검색 레코드 갯수 --> 
  <select id="search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM music
    <choose>
      <when test="word == null or word == ''"> <!-- 검색 x -->
        
      </when>
    <otherwise> <!-- 검색 o -->
       AND (title LIKE '%' || #{word} || '%'  <!-- 곡제목, 가수이름, 앨범제목, 가사 중 검색 -->
                                              OR singer LIKE '%' || #{word} || '%'
                                              OR album LIKE '%' || #{word} || '%' ) 
    </otherwise>
    </choose>
  </select>  
  
  <update id="update" parameterType="MusicVO">
    UPDATE music 
    SET title=#{title}, singer=#{singer}, album=#{album}, genre=#{genre}, youtube=#{youtube}
    WHERE musicno=#{musicno}
  </update>
  
  <!-- <select id="passwd_check" parameterType="HashMap" resultType="int">
    SELECT COUNT(*) as passwd_cnt
    FROM music
    WHERE musicno=#{musicno} AND passwd=#{passwd}
  </select> -->
  
  <delete id="delete" parameterType="int">
    DELETE FROM music
    WHERE musicno=#{musicno}
  </delete>
  
  
</mapper>